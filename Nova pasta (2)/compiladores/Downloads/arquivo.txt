I'd probably use fgets() to read whole lines, and then strstr() to find the search string. If strstr() returns 0, write the line out. Otherwise, don't.

https://www.programiz.com/c-programming/c-file-input-output
https://stackoverflow.com/questions/35025231/c-programming-how-to-delete-a-line-containing-a-specific-word-from-file
https://www.w3schools.in/c-programming/examples/delete-a-specific-line-from-a-text-file
https://stackoverflow.com/questions/9895216/how-to-remove-all-occurrences-of-a-given-character-from-string-in-c

https://stackoverflow.com/questions/45161211/i-want-to-delete-some-lines-in-txt-file-which-starts-with-c (C++)

https://www.tutorialspoint.com/delete-lines-in-a-text-file-that-contain-a-specific-string (Python)


https://www.thedailyprogrammer.com/2016/02/c-program-to-remove-comments-from-file.html (C) (Resposta)



----------------- re-escrita -----------------------
#include <stdio.h>
#include <stdlib.h>

/*
  Algoritimo para remover linhas de comentários single-line e multi-line em arquivos de texto.
                     Luiz Batista Cardoso, 27 de fevereiro 2024.

  Source: thedailyprogrammer.com/2016/02/c-program-to-remove-comments-from-file.html
*/

/* Declaração das Funções */
void checar_comentario (char) ;
void comentario_bloco () ;
void comentario_linha () ;

// Dois arquivos, um para receber o código original e outro para escrever o cód sem os comentarios
FILE *arquivo_original;
FILE *arquivo_output;

int main(void)
{
    char c;
    char fileDir[144];

    // Apresenta o usuário e pergunta o nome do arquivo
    printf("Seja bem-vindo ao removedor de comentarios, insira abaxo o diretorio do arquivo para ser processado.\n");
    printf("Diretorio Arquivo (Ex: C:\\exemplo.txt): ");
    fscanf(stdin, "%s", fileDir);

	// Abre ambos arquivos, um somente para leitura e outro somente escrita.
    arquivo_output   = fopen ("C:\\Users\\laboratorio\\Downloads\\RemovedorComentario\\saida.sco","w");

    // Se o ponteiro do arquivo for NULL informa um erro de busca e termina o algoritimo.
    if ((arquivo_original = fopen (fileDir,"r")) == NULL){
       printf("Erro! Nao foi possivel encontrar o arquivo especificado.\n");
       exit(1);
   }

	// Enquanto estiver lendo os caracteres do arquivo, chama a função de checagem.
	printf("\n\nArquivo encontrado e aberto com sucesso, removendo comentarios...\n");
    while((c=fgetc(arquivo_original))!=EOF){
		checar_comentario(c); //Envia cada caracter para função
	}

    // Fecha ambos arquivos e termina o programa.
    fclose(arquivo_original);
    fclose(arquivo_output);

    // Indica que o algoritimo terminou de ler os arquivos e mostra o diretorio
	printf("\n\nPronto! Os comentarios do arquivo inserido foram removidos com sucesso.\n");
	printf("Procure pelo arquivo 'saida.sco' na raiz do projeto para ver o resultado.\n");

    return 0;
}

//Função que checa os caracteres e decide se é um comentário ou não, se sim qual tipo.
void checar_comentario(char c)
{
    char d;

	// Se dado caracter é igual a '/', pode ser um comentario.
    if(c == '/'){

		// Se dado caractere lido depois do '/' for '*', é o começo de um comentário em bloco.
		if((d=fgetc(arquivo_original))=='*'){
		  comentario_bloco();
		}

		// Se dado caractere lido depois do '/' for '/', é o começo de um comentário de linha.
        else if(d == '/'){
          comentario_linha();
        }

		// Se não for nenhum dos dois caracteres acima, ele é insirido normalmente no novo arquivo.
        else{
          fputc(c,arquivo_output);
          fputc(d,arquivo_output);
        }

    }

	// Se todo resto for falso, somente adiciona o caractere no novo arquivo.
    else{
	  fputc(c,arquivo_output);
	}
}

// Função que remove comentarios em blocos, que começam por '/' e '*'
void comentario_bloco(){
 char d,e;

    // Partindo do começo do comentario em bloco pelo '/*', le caractere por caractere
    while((d=fgetc(arquivo_original))!=EOF){

        /*
          Continua lendo caractere a caracter, mas não escreve no arquivo de saida.
          Ficará lendo sem escrever até achar o final do comentario.
        */

        // Se for o fim da linha do comentario somente escreve essa linha em branco na saida (Preservar formato)
        if(d=='\n'){
            fputc('\n',arquivo_output);
        }

        // Se encontar o caractere '*' pode presumir que é o fim do comentario em bloco...
        if(d=='*'){

            //Aloca um segundo caractere para confirmar se realmente termina o comentario ou não.
            e=fgetc(arquivo_original);

            // Se o segundo caractere for '/' tem certeza que é o fim de um comentario e sai da função.
            if(e=='/'){
                return;
            }
        }
   }
}

// Função que remove comentarios de linha única, que começam por '/' + '/'
void comentario_linha(){
 char d;

    // Partindo do começo do comentario linha unica pelo '//', le caractere por caractere
    while((d=fgetc(arquivo_original))!=EOF){

        /*
          Continua lendo caractere a caracter, mas não escreve no arquivo de saida.
          Ficará lendo sem escrever até achar o final do comentario.
        */

        // Se encontar o fim da linha '\n' assume que é o fim do comentario e sai da função
        if(d=='\n'){
            // Se for o fim da linha do comentario somente escreve essa linha em branco na saida (Preservar formato)
            fputc('\n',arquivo_output);
            return;
        }
    }
}
    while((d=fgetc(arquivo_original))!=EOF){

        /*
          Continua lendo caractere a caracter, mas não escreve no arquivo de saida.
          Ficará lendo sem escrever até achar o final do comentario.
        */

        // Se encontar o fim da linha '\n' assume que é o fim do comentario e sai da função
        if(d=='\n'){
            // Se for o fim da linha do comentario somente escreve essa linha em branco na saida (Preservar formato)
            fputc('\n',arquivo_output);
            return;
        }
    }
}

    }
}
